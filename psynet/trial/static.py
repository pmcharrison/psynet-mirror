from typing import List, Optional, Union

from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import relationship

from psynet.trial.chain import ChainNetwork, ChainNode, ChainTrialMaker
from psynet.trial.source import Source, SourceCollection

from ..utils import deep_copy, get_logger
from .main import Trial

logger = get_logger()


class StaticTrial(Trial):
    """
    A Trial class for static experiments.

    The user must override the ``time_estimate`` class attribute,
    providing the estimated duration of the trial in seconds.
    This is used for predicting the participant's bonus payment
    and for constructing the progress bar.

    Attributes
    ----------

    time_estimate : numeric
        The estimated duration of the trial (including any feedback), in seconds.
        This should generally correspond to the (sum of the) ``time_estimate`` parameters in
        the page(s) generated by ``show_trial``, plus the ``time_estimate`` parameter in
        the page generated by ``show_feedback`` (if defined).
        This is used for predicting the participant's bonus payment
        and for constructing the progress bar.

    participant_id : int
        The ID of the associated participant.
        The user should not typically change this directly.
        Stored in ``property1`` in the database.

    complete : bool
        Whether the trial has been completed (i.e. received a response
        from the participant). The user should not typically change this directly.
        Stored in ``property2`` in the database.

    answer : Object
        The response returned by the participant. This is serialised
        to JSON, so it shouldn't be too big.
        The user should not typically change this directly.
        Stored in ``details`` in the database.

    awaiting_async_process : bool
        Whether the trial is waiting for some asynchronous process
        to complete (e.g. to synthesise audiovisual material).
        The user should not typically change this directly.

    earliest_async_process_start_time : Optional[datetime]
        Time at which the earliest pending async process was called.

    definition
        A dictionary of parameters defining the trial,
        inherited from the respective :class:`~psynet.trial.static.Stimulus` object.

    source
        The corresponding :class:`~psynet.trial.static.Stimulus`
        object.

    participant_group
        The associated participant group.

    block
        The block in which the trial is situated.
    """

    __extra_vars__ = Trial.__extra_vars__.copy()

    source_id = Column(Integer, ForeignKey("node.id"))
    source = relationship("psynet.trial.source.Source", foreign_keys=[source_id])

    participant_group = Column(String)
    block = Column(String)

    def __init__(self, experiment, node, *args, **kwargs):
        self.source = node
        self.source_id = node.id
        super().__init__(experiment, node, *args, **kwargs)
        self.participant_group = self.source.participant_group
        self.block = self.source.block

    def generate_asset_key(self, asset):
        return f"{self.trial_maker_id}/block_{self.block}__source_{self.source_id}__trial_{self.id}__{asset.label}{asset.extension}"

    def show_trial(self, experiment, participant):
        raise NotImplementedError

    def make_definition(self, experiment, participant):
        for k, v in self.source.assets.items():
            self.assets[k] = v
        return deep_copy(self.source.definition)


class StaticTrialMaker(ChainTrialMaker):
    """
    Administers a sequence of trials in a static experiment.
    The class is intended for use with the
    :class:`~psynet.trial.static.StaticTrial` helper class.
    which should be customised to show the relevant source
    for the experimental paradigm.
    The user must also define their source collection
    using the following built-in classes:

    * :class:`~psynet.trial.static.SourceCollection`;

    * :class:`~psynet.trial.static.Stimulus`;

    In particular, a :class:`~psynet.trial.static.SourceCollection`
    contains a list of :class:`~psynet.trial.static.Stimulus` objects.

    The user may also override the following methods, if desired:

    * :meth:`~psynet.trial.static.StaticTrialMaker.choose_block_order`;
      chooses the order of blocks in the experiment. By default the blocks
      are ordered randomly.

    * :meth:`~psynet.trial.static.StaticTrialMaker.choose_participant_group`;
      assigns the participant to a group. By default the participant is assigned
      to a random group.

    * :meth:`~psynet.trial.main.TrialMaker.on_complete`,
      run once the sequence of trials is complete.

    * :meth:`~psynet.trial.main.TrialMaker.performance_check`;
      checks the performance of the participant
      with a view to rejecting poor-performing participants.

    * :meth:`~psynet.trial.main.TrialMaker.compute_bonus`;
      computes the final performance bonus to assign to the participant.

    Further customisable options are available in the constructor's parameter list,
    documented below.

    Parameters
    ----------

    trial_class
        The class object for trials administered by this maker
        (should subclass :class:`~psynet.trial.static.StaticTrial`).

    sources
        The source collection to be administered.

    recruit_mode
        Selects a recruitment criterion for determining whether to recruit
        another participant. The built-in criteria are ``"num_participants"``
        and ``"num_trials"``.

    target_num_participants
        Target number of participants to recruit for the experiment. All
        participants must successfully finish the experiment to count
        towards this quota. This target is only relevant if
        ``recruit_mode="num_participants"``.

    target_num_trials_per_source
        Target number of trials to recruit for each source in the experiment
        (as opposed to for each source version). This target is only relevant if
        ``recruit_mode="num_trials"``.

    max_trials_per_block
        Determines the maximum number of trials that a participant will be allowed to experience in each block,
        including failed trials. Note that this number does not include repeat trials.

    allow_repeated_sources
        Determines whether the participant can be administered the same source more than once.

    max_unique_sources_per_block
        Determines the maximum number of unique sources that a participant will be allowed to experience
        in each block. Once this quota is reached, the participant will be forced to repeat
        previously experienced sources.

    active_balancing_within_participants
        If ``True`` (default), active balancing within participants is enabled, meaning that
        source selection always favours the sources that have been presented fewest times
        to that participant so far.

    active_balancing_across_participants
        If ``True`` (default), active balancing across participants is enabled, meaning that
        source selection favours sources that have been presented fewest times to any participant
        in the experiment, excluding failed trials.
        This criterion defers to ``active_balancing_within_participants``;
        if both ``active_balancing_within_participants=True``
        and ``active_balancing_across_participants=True``,
        then the latter criterion is only used for tie breaking.

    check_performance_at_end
        If ``True``, the participant's performance
        is evaluated at the end of the series of trials.
        Defaults to ``False``.
        See :meth:`~psynet.trial.main.TrialMaker.performance_check`
        for implementing performance checks.

    check_performance_every_trial
        If ``True``, the participant's performance
        is evaluated after each trial.
        Defaults to ``False``.
        See :meth:`~psynet.trial.main.TrialMaker.performance_check`
        for implementing performance checks.

    fail_trials_on_premature_exit
        If ``True``, a participant's trials are marked as failed
        if they leave the experiment prematurely.
        Defaults to ``True``.

    fail_trials_on_participant_performance_check
        If ``True``, a participant's trials are marked as failed
        if the participant fails a performance check.
        Defaults to ``True``.

    num_repeat_trials
        Number of repeat trials to present to the participant. These trials
        are typically used to estimate the reliability of the participant's
        responses. Repeat trials are presented at the end of the trial maker,
        after all blocks have been completed.
        Defaults to 0.

    Attributes
    ----------

    check_timeout_interval_sec : float
        How often to check for trials that have timed out, in seconds (default = 30).
        Users are invited to override this.

    response_timeout_sec : float
        How long until a trial's response times out, in seconds (default = 60)
        (i.e. how long PsyNet will wait for the participant's response to a trial).
        This is a lower bound on the actual timeout
        time, which depends on when the timeout daemon next runs,
        which in turn depends on :attr:`~psynet.trial.main.TrialMaker.check_timeout_interval_sec`.
        Users are invited to override this.

    async_timeout_sec : float
        How long until an async process times out, in seconds (default = 300).
        This is a lower bound on the actual timeout
        time, which depends on when the timeout daemon next runs,
        which in turn depends on :attr:`~psynet.trial.main.TrialMaker.check_timeout_interval_sec`.
        Users are invited to override this.

    network_query : sqlalchemy.orm.Query
        An SQLAlchemy query for retrieving all networks owned by the current trial maker.
        Can be used for operations such as the following: ``self.network_query.count()``.

    num_networks : int
        Returns the number of networks owned by the trial maker.

    networks : list
        Returns the networks owned by the trial maker.

    performance_check_threshold : float
        Score threshold used by the default performance check method, defaults to 0.0.
        By default, corresponds to the minimum proportion of non-failed trials that
        the participant must achieve to pass the performance check.

    end_performance_check_waits : bool
        If ``True`` (default), then the final performance check waits until all trials no
        longer have any pending asynchronous processes.
    """

    def __init__(
        self,
        *,
        id_: str,
        trial_class,
        sources: Union[List[Source], SourceCollection],
        num_trials_per_participant: int,
        recruit_mode: Optional[str] = None,
        target_num_participants: Optional[int] = None,
        target_num_trials_per_source: Optional[int] = None,
        max_trials_per_block: Optional[int] = None,
        allow_repeated_sources: bool = False,
        active_balancing_within_participants: bool = True,
        active_balancing_across_participants: bool = True,
        check_performance_at_end: bool = False,
        check_performance_every_trial: bool = False,
        fail_trials_on_premature_exit: bool = True,
        fail_trials_on_participant_performance_check: bool = True,
        num_repeat_trials: int = 0,
    ):
        balance_across_chains = (
            active_balancing_across_participants or active_balancing_within_participants
        )
        balance_strategy = set()
        if active_balancing_within_participants:
            balance_strategy.add("within")
        if active_balancing_across_participants:
            balance_strategy.add("across")

        super().__init__(
            id_=id_,
            sources=sources,
            trial_class=trial_class,
            network_class=StaticNetwork,
            node_class=StaticNode,
            source_class=Source,
            recruit_mode=recruit_mode,
            target_num_participants=target_num_participants,
            num_trials_per_participant=num_trials_per_participant,
            max_trials_per_block=max_trials_per_block,
            chain_type="across",
            num_chains_per_participant=None,
            num_chains_per_experiment=len(sources),
            trials_per_node=target_num_trials_per_source
            if target_num_trials_per_source
            else 1e6,
            balance_across_chains=balance_across_chains,
            balance_strategy=balance_strategy,
            num_iterations_per_chain=1,
            num_nodes_per_chain=target_num_trials_per_source,
            allow_revisiting_networks_in_across_chains=allow_repeated_sources,
            check_performance_at_end=check_performance_at_end,
            check_performance_every_trial=check_performance_every_trial,
            fail_trials_on_premature_exit=fail_trials_on_premature_exit,
            fail_trials_on_participant_performance_check=fail_trials_on_participant_performance_check,
            num_repeat_trials=num_repeat_trials,
        )

    # @property
    # def sources(self):
    #     return [source for network in self.networks for source in network.sources]
    #     return reduce(operator.add, [n.sources for n in self.networks])


class StaticNetwork(ChainNetwork):
    pass


class StaticNode(ChainNode):
    pass
