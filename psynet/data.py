import errno, json, os, re

import pandas as pd
from yaspin import yaspin

from dallinger.models import (
    Info,
    Network,
    Node,
    Notification,
    Participant,
    Question,
    Transformation,
    Transmission,
    Vector,
)

from .utils import serialise


def export():
    """
        Export data from an experiment.

        The data is exported in three distinct formats into the 'data' directory
        of an experiment which has following structure:

        data/
        ├── csv/
        ├── db-snapshot/
        └── json/

        csv:
            Contains the experiment data in CSV format including an extra
            'columns' column which holds the list of each row's specific columns
        db-snapshot:
            Contains the zip file generated by the default Dallinger export command
        json:
            Contains the experiment data in JSON format
    """
    for file_format in ["csv", "json"]:
        export_path = os.path.join("data", file_format)
        try:
            os.makedirs(export_path)
        except OSError as e:
            if e.errno != errno.EEXIST or not os.path.isdir(export_path):
                raise

    dallinger_models = [
        Info,
        Network,
        Node,
        Notification,
        Participant,
        Question,
        Transformation,
        Transmission,
        Vector,
    ]

    # Collect the data grouped by PsyNet model
    models = {}
    with yaspin(text="Collecting data...", color="green") as spinner:
        for dallinger_model in dallinger_models:
            instances = dallinger_model.query.all()
            for instance in instances:
                model = instance.__class__.__name__
                if not model in models:
                    models[model] = []
                    models[model].append(instance.__json__())
                else:
                    models[model].append(instance.__json__())
        spinner.ok("✔")

    # Export the data
    for model_name, json_data in models.items():
        base_filename = model_name_to_snake_case(model_name)
        print(f"Exporting {base_filename} data...")
        with yaspin(text="Exporting 'json'...", color="green") as spinner:
            base_filepath = os.path.join("data", "json", base_filename)
            with open(f"{base_filepath}.json", "w") as outfile:
                json.dump(json_data, outfile, indent=2, sort_keys=False, default=serialise)
            spinner.ok("✔")

        with yaspin(text="Exporting 'csv'...", color="green") as spinner:
            base_filepath = os.path.join("data", "csv", base_filename)
            with open(f"{base_filepath}.csv", "w") as outfile:
                data_frame = json_to_data_frame(json_data)
                data_frame.to_csv(outfile, index=False)
            spinner.ok("✔")

def model_name_to_snake_case(model_name):
    return re.sub(r'(?<!^)(?=[A-Z])', '_', model_name).lower()

def json_to_data_frame(json_data):
    columns = []
    for row in json_data:
        [columns.append(key) for key in row.keys() if key not in columns]

    data_frame = pd.DataFrame.from_records(json_data, columns=columns)
    return data_frame
