import sys

from dallinger.db import Base  # noqa
from dallinger.models import Info  # noqa
from dallinger.models import Network  # noqa
from dallinger.models import Node  # noqa
from dallinger.models import Notification  # noqa
from dallinger.models import Question  # noqa
from dallinger.models import Transformation  # noqa
from dallinger.models import Transmission  # noqa
from dallinger.models import Vector  # noqa
from dallinger.models import SharedMixin, timenow  # noqa
from progress.bar import Bar
from sqlalchemy import Column, String

from .experiment import add_model_to_dashboard
from .participant import Participant  # noqa
from .utils import classproperty


def export(class_name):
    """
    Export data from an experiment.

    Collects instance data for class_name, including inheriting models.
    """
    models = {}
    instances = getattr(sys.modules[__name__], class_name).query.all()
    if len(instances) == 0:
        return models
    with Bar(f"Serializing {class_name} instances", max=len(instances)) as bar:
        for instance in instances:
            model = instance.__class__.__name__
            if model not in models:
                models[model] = []
            models[model].append(instance.__json__())
            bar.next()
    return models


def show_in_dashboard(cls):
    """
    This decorator can be applied to any custom SQLAlchemy object
    to show it as a selectable category in the dashboard.
    For example:

    ``` py
    @show_in_dashboard
    class Bird(Base, SharedMixin):
        __tablename__ = "bird"
    ```
    """
    add_model_to_dashboard(cls)
    return cls


class SharedMixin(SharedMixin):
    """
    This Mixin class is used to define custom SQLAlchemy objects. For example:

    ```py
    from psynet.data import Base, SharedMixin, show_in_dashboard

    @show_in_dashboard
    class Bird(Base, SharedMixin):
        __tablename__ = "bird"

    @show_in_dashboard
    class Sparrow(Bird):
        pass
    ```
    """

    def __json__(self):
        """
        Determines the information that is shown for this object in the dashboard
        and in the csv files generated by ``psynet export``.
        """
        return {c: getattr(self, c) for c in self.sql_columns}

    @classproperty
    def sql_columns(cls):
        return cls.__mapper__.column_attrs.keys()

    @classproperty
    def parent_class(cls):
        return cls.__mro__[1]

    @classproperty
    def inherits_table(cls):
        return hasattr(cls.parent_class, "__table_name__")

    object_type = Column(String(50))

    @classproperty
    def __mapper_args__(cls):
        """
        This programmatic definition of polymorphic_identity and polymorphic_on
        means that users can define new SQLAlchemy classes without any reference
        to these SQLAlchemy constructs. Instead the polymorphic mappers are
        constructed automatically based on class names.
        """
        x = {"polymorphic_identity": cls.__name__}
        if not cls.inherits_table:
            x["polymorphic_on"] = cls.object_type
        return x
