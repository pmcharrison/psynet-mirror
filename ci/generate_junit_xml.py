#!/usr/bin/env python
"""
A python script that takes a JSON file generated by pgbadger and
outputs a junit XML file containing that file as summary.
--classname and --testname are optional arguments that can be passed.
It uses `click` to get user arguments.
"""
import json
import xml.etree.ElementTree as ET

import click

THOUSAND = 1_000


@click.command()
@click.option('--classname', default='', help='The classname of the test')
@click.option('--testname', default='', help='The name of the test')
@click.argument('pgbadger_file', type=click.File('r'))
def main(classname, testname, pgbadger_file):
    text = pgbadger_file.read()
    data = json.loads(text)
    total_duration = data["database_info"]["postgres"]["unknown"]["duration"] / THOUSAND
    testsuite = ET.Element("testsuite", {
        "name": "pgbadger - " + testname,
        "tests": str(len(data['normalyzed_info']['postgres'])),
        "errors": "0",
        "failures": "0",
        "skipped": "0",
        "time": str(total_duration)
    })

    for query, info in data['normalyzed_info']['postgres'].items():
        count = info["count"]
        ET.SubElement(testsuite, "testcase", {
            "classname": classname,
            "name": f'[{count}X] {query}',
            "time": str(info["duration"] / THOUSAND)
        })
    xml_str = ET.tostring(testsuite, encoding="unicode", method="xml")
    click.get_text_stream('stdout').write('<?xml version="1.0" encoding="UTF-8"?>\n')
    click.get_text_stream('stdout').write(xml_str)


if __name__ == '__main__':
    main()
