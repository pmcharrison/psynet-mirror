.. _imitation_chains:

================
Imitation chains
================

An imitation-chain experiment depends on the five following classes:

* :class:`~psynet.trial.imitation_chain.ImitationChainNetwork`
* :class:`~psynet.trial.imitation_chain.ImitationChainSource`;
* :class:`~psynet.trial.imitation_chain.ImitationChainNode`;
* :class:`~psynet.trial.imitation_chain.ImitationChainTrial`;
* :class:`~psynet.trial.imitation_chain.ImitationChainMaker`.

You can define a custom imitation-chain experiment through the following steps:

1. Decide on a set of fixed parameters that will stay constant within 
   a chain but may change between chains. For example, one might 
   use a list with two presentation conditions, ``["fast", "slow"]``.
   Implement a subclass of :class:`~psynet.trial.imitation_chain.ImitationChainNetwork`
   with a custom :meth:`~psynet.trial.imitation_chain.ImitationChainNetwork.make_definition` method
   for choosing these fixed parameter values for a given chain. 
   The :meth:`~psynet.trial.chain.ChainNetwork.balance_across_networks` method 
   is typically useful here.
   
2. Decide on a set of free parameters that will define the parameter space
   for your chains. For example, one might use a tuple of three integers
   identifying an RGB color (e.g. ``(255, 25, 0)``).
   Implement a subclass of :class:`~psynet.trial.imitation_chain.ImitationChainSource`
   with a custom :meth:`~psynet.trial.imitation_chain.ImitationChainSource.generate_seed` method
   for generating the starting free parameter set for an imitation chain.
   
3. Implement a subclass of :class:`~psynet.trial.imitation_chain.ImitationChainTrial`
   with a custom
   :meth:`~psynet.trial.imitation_chain.ImitationChainTrial.show_trial` method.
   This :meth:`~psynet.trial.imitation_chain.ImitationChainTrial.show_trial` method
   should take the current values of the free parameters
   (stored in :attr:`~psynet.trial.imitation_chain.ImitationChainTrial.definition`)
   as well as the value of the network's fixed parameters
   (stored in :attr:`~psynet.trial.imitation_chain.ImitationChainNetwork.definition`)
   and produce an object of 
   class :class:`~psynet.timeline.Page`. [1]_
   This :class:`~psynet.timeline.Page` object should elicit an answer
   representing the participant's imitation attempt
   (see the :meth:`~psynet.timeline.Page.format_answer` method 
   if you need to postprocess this answer).
   
4. (Optional) Implement a subclass of 
   :class:`~psynet.trial.imitation_chain.ImitationChainNode`
   with a custom 
   :meth:`~psynet.trial.imitation_chain.ImitationChainNode.summarize_trials` method.
   This new method should take a list of completed 
   :class:`~psynet.trial.imitation_chain.ImitationChainTrial` objects as input 
   and summarize the elicited answers,
   which can be found in the :attr:`~psynet.trial.answer` attribute
   of each :class:`~psynet.trial.imitation_chain.ImitationChainTrial` object.
   This summary will be used as the new parameter set for the next node in the network,
   and for the trials it generates.
   In conventional imitation chains, there is just one 
   :class:`~psynet.trial.imitation_chain.ImitationChainTrial`
   per :class:`~psynet.trial.imitation_chain.ImitationChainNode`,
   and :meth:`~psynet.trial.imitation_chain.ImitationChainNode.summarize_trials`
   just returns the stimulus generated by the participant.
   This behaviour is implemented in the default implementation.
   However, if one wishes to increase the number of trials per node,
   then one will have to implement a custom 
   :meth:`~psynet.trial.imitation_chain.ImitationChainNode.summarize_trials` method.
   
5. Create an instance of :class:`~psynet.trial.imitation_chain.ImitationChainTrialMaker`,
   filling in its constructor parameter list
   with reference to the classes you created above,
   and insert it into your experiment's timeline.
   
See the low-level documentation (below)
and the demo (``demos/imitation_chain``)
for more details.

Note: you can customize the assignment of participants to chains by overriding the
:meth:`~psynet.trial.imitation_chain.ImitationChainTrialMaker.custom_network_filter` method.

.. [1] The :meth:`~psynet.trial.imitation_chain.ImitationChainTrial.show_trial` method
   may alternatively return a list of :class:`~psynet.timeline.Page` objects.
   In this case, the user is responsible for ensuring that the final
   page returns the appropriate ``answer``.
   The user should also specify an estimated number of pages in the
   :attr:`~psynet.trial.imitation_chain.ImitationChainTrial.num_pages` attribute.

.. automodule:: psynet.trial.imitation_chain
    :show-inheritance:
    :members:
    
