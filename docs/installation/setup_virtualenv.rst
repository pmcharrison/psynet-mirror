Setup virtual environment
~~~~~~~~~~~~~~~~~~~~~~~~~

You need to use virtual environments to work with PsyNet.
This can be confusing if you haven't used Python virtual environments before.
We strongly recommend you take half an hour at this point to read some online tutorials
about virtual environments and managing them with ``virtualenvwrapper` before continuing.

The following code installs ``virtualenvwrapper``:

.. code-block:: bash

   pip3 install virtualenv
   pip3 install virtualenvwrapper
   export WORKON_HOME=$HOME/.virtualenvs
   mkdir -p $WORKON_HOME
   export VIRTUALENVWRAPPER_PYTHON=$(which python3)
   source $(which virtualenvwrapper.sh)
   echo "export VIRTUALENVWRAPPER_PYTHON=$(which python3)" >> ~/.zshrc
   echo "source $(which virtualenvwrapper.sh)" >> ~/.zshrc

We recommend using ``virtualenvwrapper`` to create a separate virtual environment for each project you work on.
A project would a be a single experiment implementation, namely a directory containing
an ``experiment.py`` file as well as various supporting files, such as ``requirements.txt`` and ``constraints.txt``.
If you are just testing out PsyNet for the first time, we recommend you try out a demo as your first project.
To open a project in PyCharm (e.g. a demo), click 'Open' in the PyCharm welcome screen,
then navigate to the directory containing the project, select the project, and click 'Open'.
Alternatively, if you already have a PyCharm project open, click 'File' > 'Open', find the directory,
select it, and click 'Open'.

When you open a new project in PyCharm, you should see a dialogue box that says something like
"File requirements.txt contains project dependencies. Would you like to create a virtual environment using it?".
In the dependencies field you should see a path ending in requirements.txt. Replace "requirements.txt"
with "constraints.txt" and then click "OK". PyCharm will then create a virtual environment for you
and install all the required packages.

.. info::

    Why do we install from constraints.txt rather than requirements.txt?
    requirements.txt is written manually by the experimenter, and lists all the packages
    that they want to use in their experiment.
    constraints.txt is then automatically generated by PsyNet, and additionally lists
    all the dependencies of the packages in requirements.txt.
    Importantly, PsyNet ensures that the versions of the packages in constraints.txt
    are compatible with the current version of PsyNet.
    Moreover, listing these versions explicitly in constraints.txt means that when future experimenters
    come to run the experiment, they will be able to install exactly the same versions of the packages
    that we originally used.

If you do not see this PyCharm dialogue box, you can instead create the virtual environment by
clicking the interpreter box in the bottom right corner of the screen (it might say something like
'No interpreter selected' or 'Python 3.X'), then clicking 'Add new interpreter' > 'Add local interpreter'.
Select 'Virtualenv environment', select 'New', make sure that the correct version of Python is selected,
then press OK. PyCharm will spend some time processing this selection, but then when you open a new terminal tab it should load
your virtual environment automatically.

If you are not using PyCharm, you can create a virtual environment using the following command:

.. code-block:: bash

   mkvirtualenv my-project --python $(which python3)

Whenever you develop or deploy an experiment using PsyNet (assuming you are not using Docker) you will need to
make sure you are in the appropriate virtual environment.
You can confirm that you are in the correct virtual environment by looking at the start of your terminal prompt.
It should look something like this: ``(my-project) your-name@your-computer-name ~ %``.
If you have only just created your new virtual environment in PyCharm, you might need to open
a new terminal window for your virtual environment to be loaded.
Your virtual environment should activate automatically when you open your project in PyCharm;
if it does not, you can select it by clicking the interpreter box in the bottom right corner of the screen.
If you are not using PyCharm, you can activate your virtual environment by running the following command
in your terminal:

.. code-block:: bash

   workon my-project

where in this case ``my-project`` is the name of the virtual environment.

To delete a pre-existing virtual environment, use the ``rmvirtualenv`` command like this:

.. code-block:: bash

   rmvirtualenv psynet

If you experience problems setting up the virtual environment:

- Check in which directory virtualenvwrapper.sh is installed. This might be a different directory
  than '~/.local/bin/'. In that case, adapt the code above to source this file accordingly.
- Check whether the directory where virtualenvwrapper.sh was installed is added to PATH.
  If not, add the directory to PATH.
