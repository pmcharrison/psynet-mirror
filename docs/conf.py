#!/usr/bin/env python
#
# psynet documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  9 13:47:02 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
#
import os
import sys
from glob import glob
from os.path import abspath, basename, join

import pandas as pd
import polib

import psynet
from psynet import __version__ as version
from psynet.utils import get_language_dict

sys.path.insert(0, os.path.abspath(".."))

# -- General configuration ---------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    "sphinx.ext.napoleon",
    "sphinx.ext.autodoc",
    "sphinx_autodoc_typehints",
    "sphinx.ext.viewcode",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "PsyNet"
copyright = "2022, Peter Harrison"
author = "Peter Harrison"

# The version info for the project you're documenting, acts as replacement
# for |version| and |release|, also used in various other places throughout
# the built documents.
#
# The short X.Y version.
#
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Options for HTML output -------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'
html_theme = "furo"
html_theme_path = [
    "_themes",
]

# Theme options are theme-specific and customize the look and feel of a
# theme further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# These paths are either relative to html_static_path
# or fully qualified paths (eg. https://...)
html_css_files = [
    "css/custom.css",
]

html_js_files = [
    'js/custom.js',
]

# -- Options for HTMLHelp output ---------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "psynetdoc"

# -- Options for LaTeX output ------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass
# [howto, manual, or own class]).
latex_documents = [
    (master_doc, "psynet.tex", "PsyNet Documentation", "Peter Harrison", "manual"),
]

# -- Options for manual page output ------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "psynet", "PsyNet Documentation", [author], 1)]

# -- Options for Texinfo output ----------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "psynet",
        "PsyNet Documentation",
        author,
        "psynet",
        "One line description of project.",
        "Miscellaneous",
    ),
]

# This creates an 'Edit in GitLab' button on each documentation page.
# This will take the user to a web IDE where they can propose changes
# to the documentation page.
html_theme_options = {
    "source_repository": "https://gitlab.com/PsyNetDev/PsyNet/",
    "source_branch": "dev",
    "source_directory": "docs/",
}

language_dict = get_language_dict('en')
psynet_init_path = abspath(psynet.__file__)


def extract_translation_information():
    locales_dir = join(psynet_init_path.replace(basename(psynet_init_path), ''), 'locales')
    po_files = glob(locales_dir + '/*/*/*.po')

    results = []
    for po_file in po_files:
        language_iso = po_file.split('/')[-3]
        language_name = language_dict[language_iso]
        po = polib.pofile(po_file)
        total_entries = len(po)
        untranslated_entries = len([entry for entry in po if entry.msgstr == ''])
        unverified_entries = len([entry for entry in po if entry.fuzzy and entry.msgstr != ''])
        results.append({
            'language_iso': language_iso,
            'language_name': language_name,
            'percent_verified': round((total_entries - unverified_entries) / total_entries * 100, 1),
            'percent_translated': round((total_entries - untranslated_entries) / total_entries * 100, 1),
            'translator': po.metadata['Last-Translator']
        })

    return pd.DataFrame(results).sort_values('language_name').to_dict('records')


def percent(s):
    return f"{s} %"


def process_row(row):
    language = f"{row['language_name']} (``{row['language_iso']}``)"
    return [language, percent(row['percent_translated']), percent(row['percent_verified']), row['translator']]


class RstCloth:
    def __init__(self, output_file):
        self.output_file = output_file

    def title(self, title):
        self.output_file.write(f'''{"=" * len(title)}\n{title}\n{"=" * len(title)}\n''')

    def h3(self, title):
        self.output_file.write(f'''{title}\n{"-" * len(title)}\n''')

    def write_rows(self, rows):
        first = True
        for row in rows:
            if first:
                self.output_file.write(f'''   * - {row}\n''')
                first = False
            else:
                self.output_file.write(f'''     - {row}\n''')

    def table(self, header, rows):
        self.output_file.write('''.. list-table::\n''')
        self.output_file.write('''   :header-rows: 1\n''')
        self.output_file.write('''   :widths: 15 15 15 55\n''')
        self.newline()
        self.write_rows(header)
        for row in rows:
            self.write_rows(row)

    def newline(self):
        self.output_file.write('\n')


def generate_translation_table():
    with open('dashboards/translation.rst', 'w') as output_file:
        doc = RstCloth(output_file)
        doc.title('Translation dashboard')
        doc.newline()

        table = extract_translation_information()
        doc.h3(f'PsyNet is available in {len(table)} languages:')

        doc.table(
            ['Language', 'Percent translated', 'Percent verified', 'Translator'],
            [process_row(row) for row in table]
        )


generate_translation_table()
