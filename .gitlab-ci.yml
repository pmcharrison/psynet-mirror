image: python:3.10

# Comment this out if you decide to use local postgres instead
services:
  - postgres:12.2-alpine


variables:
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  # Comment these out if you decide to use local postgres instead
  POSTGRES_DB: dallinger
  POSTGRES_USER: dallinger
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: trust
  DATABASE_URL: postgresql://dallinger@postgres:5432/dallinger

# Uncomment this if you decide to use local postgres instead
#variables:
#  POSTGRES_DB: dallinger
#  POSTGRES_USER: dallinger
#  POSTGRES_PASSWORD: "dallinger"
#  DATABASE_URL: postgresql://dallinger:dallinger@localhost:5432/dallinger

before_script:
# General setup
  - apt update
  - apt -f -y install curl redis-server unzip
  - service redis-server start
  - curl https://cli-assets.heroku.com/install.sh | sh
  - wget -O chrome.deb http://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_101.0.4951.64-1_amd64.deb
  - wget -O chrome-driver.zip https://chromedriver.storage.googleapis.com/101.0.4951.41/chromedriver_linux64.zip
  - apt -f -y install ./chrome.deb
  - unzip chrome-driver.zip chromedriver -d /usr/local/bin/
#  - pip install "git+https://gitlab+deploy-token-478431:98jnkW1yq_AYWLYpRNtN@gitlab.com/computational-audition-lab/melody/melody-experiments@master#egg=melody_experiments[extract]"
  - pip install "git+https://repp:tvKi4cirMxgnuf9s4Vma@gitlab.com/computational-audition-lab/repp@master#egg=repp"
  - pip install "git+https://reppextension:s_Ux2u-2emzHPK4kVq6g@gitlab.com/computational-audition-lab/repp-technology/reppextension#egg=reppextension"
  - pip install pytest-test-groups
  - export HEADLESS=TRUE
# Install and setup PostgreSQL - uncomment this if you decide to use local postgres instead
#  - apt install -y postgresql postgresql-contrib libpq-dev
#  - service postgresql start
#  - runuser -l postgres -c 'echo -e "dallinger\ndallinger" | createuser -P -e dallinger'
#  - chown postgres:postgres postgres_setup.sql
#  - runuser -l postgres -c 'psql -c "\i /builds/computational-audition-lab/psynet/postgres_setup.sql"'
# Install Dallinger
#  - git clone --branch v9.0.0 https://github.com/Dallinger/Dallinger.git /tmp/dallinger
  - git clone --branch tmp-peter https://github.com/Dallinger/Dallinger.git /tmp/dallinger
  - pip install -r /tmp/dallinger/dev-requirements.txt
  - pip install -e /tmp/dallinger[data]
# Install PsyNet
  - pip install -e .[dev]
  - psynet generate-config --debug_storage_root "$HOME/psynet-debug-storage" --default_export_root "$HOME/psynet-exports"
  - cat ~/.dallingerconfig
  - python3 -c "from psynet.experiment import Experiment; Experiment.extra_parameters(); from psynet.utils import get_from_config; print(get_from_config('debug_storage_root'))"
  - echo $USER


# --aws_access_key_id "$AWS_ACCESS_KEY_ID" --aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --aws_region "$AWS_DEFAULT_REGION"

tests:
  parallel: 10
  stage: test
  script:
  - pytest -s --test-group-count $CI_NODE_TOTAL --test-group=$CI_NODE_INDEX --test-group-random-seed=12345 --ignore=tests/local_only --ignore=tests/isolated --chrome tests

pages:
  stage: deploy
  script:
  - pip install -U sphinx
  - pip install sphinx_rtd_theme
  - pip install sphinx-autodoc-typehints
  - sphinx-build -b html docs public
  artifacts:
    paths:
    - public
    - public/low_level
  only:
  - master
