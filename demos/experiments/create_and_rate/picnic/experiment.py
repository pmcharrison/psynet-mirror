# pylint: disable=unused-import,abstract-method,unused-argument

##########################################################################################
# Imports
##########################################################################################
import json
from random import sample

import psynet.experiment
from psynet.modular_page import Control, ModularPage, Prompt
from psynet.timeline import Timeline
from psynet.trial.create_and_rate import (
    CreateAndRateNode,
    CreateAndRateTrialMakerMixin,
    CreateTrialMixin,
    RateTrialMixin,
)
from psynet.trial.imitation_chain import ImitationChainTrial, ImitationChainTrialMaker
from psynet.utils import get_logger

from .utils import final_questionnaire, instructions

logger = get_logger()

with open("data.json") as f:
    dummy_data = json.load(f)


N_CREATORS = 2
N_RATERS = 2
N_REPEAT_ITEMS = 0
N_ITERATIONS = 1
VISITED_RULE_IDS_KEY = "visited_rule_ids"
MAX_TIME = 60 * 5  # 5 minutes
AVG_TIME_ESTIMATE = 20


def get_prompt_args(node):
    context = node.context
    trial_maker = node.trial_maker
    predicted_rules = [
        t.answer["rule"] for t in trial_maker.get_finished_creations(node)
    ]
    return (
        context["positives"],
        context["negatives"],
        predicted_rules,
        node.id,
        context["rule"],
    )


###################################################
# Creator
###################################################
class CreatePrompt(Prompt):
    macro = "creator_prompt"
    external_template = "custom-macros.html"

    def __init__(
        self,
        positive_examples: list,
        negative_examples: list,
        predicted_rules: list,
        node_id: int,
        rule: str,
    ):
        super().__init__()
        self.positive_examples = positive_examples
        self.negative_examples = negative_examples
        self.predicted_rules = predicted_rules
        self.node_id = node_id
        self.rule = rule

    @property
    def metadata(self):
        return {
            "positive_examples": self.positive_examples,
            "negative_examples": self.negative_examples,
            "predicted_rules": self.predicted_rules,
            "node_id": self.node_id,
            "rule": self.rule,
        }


class CreateControl(Control):
    macro = "creator_control"
    external_template = "custom-macros.html"

    def get_bot_response(self, experiment, bot, page, prompt):
        return {"rule": "This is a rule generated by a bot."}


class CreateTrial(CreateTrialMixin, ImitationChainTrial):
    time_estimate = 20

    def show_trial(self, experiment, participant):
        return ModularPage(
            "create_trial",
            CreatePrompt(*get_prompt_args(self.node)),
            CreateControl(),
            time_estimate=self.time_estimate,
        )


###################################################
# Rater
###################################################


class RatePrompt(CreatePrompt):
    macro = "rater_prompt"
    external_template = "custom-macros.html"


class RateControl(Control):
    macro = "rater_control"
    external_template = "custom-macros.html"

    def get_bot_response(self, experiment, bot, page, prompt):
        return {
            f"Rule {i + 1}": {"checked": True, "rule": f"Rule {i + 1}"}
            for i in range(N_CREATORS + 1)
        }


class RateTrial(RateTrialMixin, ImitationChainTrial):
    time_estimate = 20

    def show_trial(self, experiment, participant):
        positives, negatives, predicted_rules, node_id, rule = get_prompt_args(
            self.node
        )
        predicted_rules += sample(predicted_rules, N_REPEAT_ITEMS)
        return ModularPage(
            "rate_trial",
            RatePrompt(positives, negatives, predicted_rules, node_id, rule),
            RateControl(),
            time_estimate=self.time_estimate,
        )

    def format_answer(self, answer, **kwargs):
        answer = [
            int(answer["checked"]) for answer in list(answer.values())[:N_CREATORS]
        ]
        return super(RateTrial, self).format_answer(answer, **kwargs)


start_nodes = [CreateAndRateNode(context=d) for d in dummy_data]


class CreateAndRateTrialMaker(CreateAndRateTrialMakerMixin, ImitationChainTrialMaker):
    pass


##########################################################################################
# Experiment
##########################################################################################


class Exp(psynet.experiment.Experiment):
    label = "Picnic"
    initial_recruitment_size = 1

    timeline = Timeline(
        instructions,
        CreateAndRateTrialMaker(
            n_creators=N_CREATORS,
            n_raters=N_RATERS,
            node_class=CreateAndRateNode,
            creator_class=CreateTrial,
            rater_class=RateTrial,
            # mixin params
            include_previous_iteration=False,
            rate_mode="rate",
            target_selection_method="all",
            randomize_target_presentation_order=True,
            # trial_maker params
            id_="picnic",
            chain_type="across",
            expected_trials_per_participant=len(start_nodes),
            max_trials_per_participant=len(start_nodes),
            start_nodes=start_nodes,
            chains_per_experiment=len(start_nodes),
            balance_across_chains=False,
            check_performance_at_end=True,
            check_performance_every_trial=False,
            propagate_failure=False,
            recruit_mode="n_trials",
            target_n_participants=None,
            wait_for_networks=True,
            max_nodes_per_chain=N_ITERATIONS,
        ),
        final_questionnaire,
    )
